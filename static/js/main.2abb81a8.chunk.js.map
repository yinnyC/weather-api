{"version":3,"sources":["utils/index.js","actions/index.js","reducers/weatherDataReducer.js","reducers/index.js","Weather/CurrentDisplay/CurrentDisplay.js","Weather/ForcastDisplay/ForcastDisplay.js","Weather/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["apikey","process","zip","unit","a","path","fetch","res","json","lat","lon","forcastPath","GET_CURRENT_WEATHER","GET_FORCAST_WEATHER","CLEAR_SEARCH","SET_ZIP","SET_UNIT","getCurrentWeather","dispatch","fetchWeather","then","type","payload","catch","err","console","error","getForcastWeather","fetchForcast","weatherDataReducer","state","data","forcastDays","coord","action","cod","message","tempData","main","temp","humidity","feelsLike","feels_like","weather","description","icon","name","tempForcast","daily","dailyForcast","forEach","entry","day","min","max","dt","push","combineReducers","weatherData","CurrentDisplay","props","className","alt","src","ForcastDisplay","log","map","forcast","weekday","Date","toLocaleDateString","Weather","useDispatch","form","useSelector","placeholder","value","onChange","e","setZip","target","setUnit","id","onClick","preventDefault","store","createStore","rootReducer","applyMiddleware","thunk","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2abb81a8.chunk.js","sourcesContent":["const apikey = process.env.REACT_APP_WEATHER_API_KEY;\n\nexport const defaultState = () => ({\n  zip: '94110',\n  unit: 'metric',\n  data: null,\n  forcastDays: null,\n  coord: {\n    lon: '-122.4153',\n    lat: '37.7509',\n  },\n});\n\nexport async function fetchWeather(zip, unit) {\n  // fetch weather\n  const path = `https://api.openweathermap.org/data/2.5/weather?zip=${zip}&appid=${apikey}&units=${unit}`;\n  const res = await fetch(path);\n  const json = await res.json();\n  return json;\n}\n\nexport async function fetchForcast(lat, lon, unit) {\n  // fetch weather\n  const forcastPath = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude={hourly,current,minutely,alerts}&appid=${apikey}&units=${unit}`;\n  const res = await fetch(forcastPath);\n  const json = await res.json();\n  return json;\n}\n","import { fetchWeather, fetchForcast } from '../utils';\n\nexport const GET_CURRENT_WEATHER = 'GET_CURRENT_DATA';\nexport const GET_FORCAST_WEATHER = 'GET_FORCAST_WEATHER';\nexport const GET_DAILY_FORCAST = 'GET_DAILY_FORCAST';\nexport const CLEAR_SEARCH = 'CLEAR_SEARCH';\nexport const SET_ZIP = 'SET_ZIP';\nexport const SET_UNIT = 'SET_UNIT';\n\nexport const clearSearch = () => ({\n  type: CLEAR_SEARCH,\n  payload: { },\n});\nexport const setZip = (zip) => ({\n  type: SET_ZIP,\n  payload: { zip },\n});\nexport const setUnit = (unit) => ({\n  type: SET_UNIT,\n  payload: { unit },\n});\n\nexport const getCurrentWeather = (zip, unit) => (dispatch) => {\n  fetchWeather(zip, unit)\n    .then((json) => {\n      dispatch({\n        // return a function instead of obj\n        type: GET_CURRENT_WEATHER,\n        payload: { json },\n      });\n    })\n    .catch((err) => console.error(err));\n};\n\nexport const getForcastWeather = (lat, lon, unit) => (dispatch) => {\n  fetchForcast(lat, lon, unit)\n    .then((json) => {\n      dispatch({\n        // return a function instead of obj\n        type: GET_FORCAST_WEATHER,\n        payload: { json },\n      });\n    })\n    .catch((err) => console.error(err));\n};\n","import { defaultState } from '../utils';\nimport {\n  SET_UNIT, SET_ZIP, GET_CURRENT_WEATHER, CLEAR_SEARCH, GET_FORCAST_WEATHER,\n} from '../actions';\n\nconst weatherDataReducer = (state = defaultState(), action) => {\n  const {\n    zip, unit, data, forcastDays, coord,\n  } = state;\n  switch (action.type) {\n    case GET_CURRENT_WEATHER: {\n      const { json } = action.payload;\n      const { cod, message } = json;\n      if (cod !== 200) {\n        const tempData = { cod, message };\n        return { ...state, data: tempData };\n      }\n      const { lat, lon } = json.coord;\n      const { temp, humidity } = json.main;\n      const feelsLike = json.main.feels_like;\n      const { description, icon } = json.weather[0];\n      const { name } = json;\n      return {\n        ...state,\n        data: {\n          cod, message, temp, feelsLike, description, humidity, icon, name,\n        },\n        coord: { lat, lon },\n      };\n    }\n    case GET_FORCAST_WEATHER: {\n      const { json } = action.payload;\n      const { cod, message } = json;\n      const tempForcast = json.daily;\n      const dailyForcast = [];\n      tempForcast.forEach((entry) => {\n        const { icon } = entry.weather[0];\n        const { day, min, max } = entry.temp;\n        const { dt } = entry;\n        dailyForcast.push({\n          icon, day, min, max, dt,\n        });\n      });\n      return { ...state, forcastDays: dailyForcast };\n    }\n    case CLEAR_SEARCH:\n      return { ...state, data: null, forcastDays: null };\n    case SET_UNIT:\n      return { ...state, unit: action.payload.unit };\n    case SET_ZIP:\n      return { ...state, zip: action.payload.zip };\n    default:\n      return state;\n  }\n};\n\nexport default weatherDataReducer;\n","import { combineReducers } from 'redux';\n\nimport weatherDataReducer from './weatherDataReducer';\n\nexport default combineReducers({\n  weatherData: weatherDataReducer,\n});\n","import './CurrentDisplay.css';\n\nfunction CurrentDisplay(props) {\n  const {\n    temp, feelsLike, description, cod, message, icon, humidity, name,\n  } = props;\n  if (cod !== 200) {\n    return (\n      <div className=\"ErrorMsg\">\n        <img alt=\"erroricon\" src=\"https://img.icons8.com/pastel-glyph/64/000000/error--v4.png\" />\n        <small>{message}</small>\n      </div>\n    );\n  }\n  return (\n    <div className=\"CurrentDisplay\">\n      <div className=\"Info\">\n        <h2>{name}</h2>\n        <h1>{temp}</h1>\n        <small>{description}</small>\n        <p>{`Feels Like: ${feelsLike}`}</p>\n        <p>{`Humidity: ${humidity}`}</p>\n      </div>\n      <img alt=\"icon\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\n    </div>\n  );\n}\n\nexport default CurrentDisplay;\n","import './ForcastDisplay.css';\n\nfunction ForcastDisplay(props) {\n  const { forcastDays } = props;\n  console.log(forcastDays);\n  return (\n    <div className=\"ForcastDisplay\">\n      {forcastDays.map((forcast) => {\n        console.log(forcast);\n        const {\n          icon, day, min, max, dt,\n        } = forcast;\n        const weekday = (new Date(dt * 1000)).toLocaleDateString('en-US', { weekday: 'long' });\n        return (\n          <div className=\"ForcastInfo\">\n            <h4>{weekday}</h4>\n            <img alt=\"icon\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\n            <div>\n              <small>{`Max: ${max}`}</small>\n              {' '}\n              <small>{`Min: ${min}`}</small>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default ForcastDisplay;\n","import { useSelector, useDispatch } from 'react-redux';\nimport CurrentDisplay from './CurrentDisplay/CurrentDisplay';\nimport ForcastDisplay from './ForcastDisplay/ForcastDisplay';\nimport {\n  setZip, setUnit, getCurrentWeather, clearSearch, getForcastWeather,\n} from '../actions';\nimport './Weather.css';\n\nfunction Weather() {\n  const dispatch = useDispatch();\n  const form = useSelector((state) => state.weatherData);\n  const {\n    zip, unit, data, coord, forcastDays,\n  } = form;\n  // --------------------------------------\n  function fetchWeather() {\n    dispatch(getCurrentWeather(zip, unit));\n    dispatch(getForcastWeather(coord.lat, coord.lon, unit));\n  }\n  // --------------------------------------\n  return (\n    <div className=\"Weather\">\n      <div className=\"Display\">\n        {data ? <CurrentDisplay {...data} /> : <h2 className=\"Greeting\">Hi There 👋🏻 How&apos;s the weather?</h2>}\n        <hr />\n        {forcastDays ? <ForcastDisplay forcastDays={forcastDays} /> : <h2 className=\"Greeting\">Enter yout Zipcode to find out</h2>}\n      </div>\n      <form>\n        <div className=\"inputBar\">\n          <label>\n            Zip Code\n          </label>\n          <input\n            type=\"number\"\n            placeholder=\"Enter Zip Code\"\n            value={zip}\n            onChange={(e) => {\n              dispatch(setZip(e.target.value));\n              if (e.target.value === '') {\n                dispatch(clearSearch());\n              }\n            }}\n          />\n        </div>\n        <div className=\"selectBar\">\n          <label>\n            Unit\n          </label>\n          <select\n            value={unit}\n            onChange={(e) => dispatch(setUnit(e.target.value))}\n          >\n            <option value=\"metric\">metric</option>\n            <option value=\"imperial\">imperial</option>\n            <option value=\"standard\">standard</option>\n          </select>\n        </div>\n        <button\n          id=\"currentWeather\"\n          type=\"button\"\n          onClick={(e) => {\n            e.preventDefault();\n            fetchWeather();\n          }}\n        >\n          Get Current Weather\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default Weather;\n","import { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport './App.css';\nimport Weather from './Weather/Weather';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Weather />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}