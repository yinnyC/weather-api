{"version":3,"sources":["Weather/RadioButton/RadioButton.js","Weather/WeatherDisplay/WeatherDisplay.js","Weather/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["RadioButton","props","label","unit","onChange","htmlFor","type","name","checked","WeatherDisplay","temp","feelsLike","description","cod","message","icon","humidity","className","alt","src","Weather","useState","zip","setZip","setUnit","data","setData","a","process","path","fetch","res","json","main","feels_like","weather","onSubmit","e","preventDefault","fetchWeather","placeholder","value","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24548ed2.chunk.js","sourcesContent":["function RadioButton(props) {\n  const { label, unit, onChange } = props;\n  return (\n    <label htmlFor={label}>\n      <input\n        type=\"radio\"\n        name=\"unit\"\n        checked={unit === label}\n        onChange={onChange}\n      />\n      {label}\n    </label>\n  );\n}\n\nexport default RadioButton;\n","import './WeatherDisplay.css';\n\nfunction WeatherDisplay(props) {\n  const {\n    temp, feelsLike, description, cod, message, icon, humidity,\n  } = props;\n  if (cod !== 200) {\n    return (\n      <div className=\"ErrorMsg\">\n        <img alt=\"erroricon\" src=\"https://img.icons8.com/pastel-glyph/64/000000/error--v4.png\" />\n        <small>{message}</small>\n      </div>\n    );\n  }\n  return (\n    <div className=\"WeatherDisplay\">\n      <div className=\"Info\">\n        <h1>{temp}</h1>\n        <small>{description}</small>\n        <p>{`Feels Like: ${feelsLike}`}</p>\n        <p>{`Humidity: ${humidity}`}</p>\n      </div>\n      <img alt=\"icon\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\n    </div>\n  );\n}\n\nexport default WeatherDisplay;\n","import { useState } from 'react';\nimport RadioButton from './RadioButton/RadioButton';\nimport WeatherDisplay from './WeatherDisplay/WeatherDisplay';\nimport './Weather.css';\n\nfunction Weather() {\n  const [zip, setZip] = useState('94110');\n  const [unit, setUnit] = useState('metric');\n  const [data, setData] = useState(null);\n  // --------------------------------------\n  async function fetchWeather() {\n    // fetch weather\n    const apikey = process.env.REACT_APP_WEATHER_API_KEY;\n    const path = `https://api.openweathermap.org/data/2.5/weather?zip=${zip}&appid=${apikey}&units=${unit}`;\n    const res = await fetch(path);\n    const json = await res.json();\n    const { cod, message } = json;\n    if (cod !== 200) {\n      setData({ cod, message });\n      return;\n    }\n    const { temp, humidity } = json.main;\n    const feelsLike = json.main.feels_like;\n    const { description, icon } = json.weather[0];\n    setData({\n      cod, message, temp, feelsLike, description, humidity, icon,\n    });\n  }\n  // --------------------------------------\n  return (\n    <div className=\"Weather\">\n      {data ? <WeatherDisplay {...data} /> : <h2 className=\"Greeting\">How&apos;s the weather?</h2>}\n      <form onSubmit={(e) => {\n        e.preventDefault();\n        fetchWeather();\n      }}\n      >\n        <div className=\"inputBar\">\n          <input\n            type=\"number\"\n            placeholder=\"Enter Zip Code\"\n            value={zip}\n            onChange={(e) => {\n              setZip(e.target.value);\n              if (e.target.value === '') {\n                setData(null);\n              }\n            }}\n          />\n          <button type=\"submit\">Submit</button>\n        </div>\n        <select\n          value={unit}\n          onChange={(e) => setUnit(e.target.value)}\n        >\n          <option value=\"metric\">metric</option>\n          <option value=\"imperial\">imperial</option>\n          <option value=\"standard\">standard</option>\n        </select>\n        <div className=\"RadioButtons\">\n          <RadioButton\n            label=\"metric\"\n            unit={unit}\n            onChange={() => setUnit('metric')}\n          />\n          <RadioButton\n            label=\"imperial\"\n            unit={unit}\n            onChange={() => setUnit('imperial')}\n          />\n          <RadioButton\n            label=\"standard\"\n            unit={unit}\n            onChange={() => setUnit('standard')}\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Weather;\n","import './App.css';\nimport Weather from './Weather/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}